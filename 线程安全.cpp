//
// Created by Administrator on 2023/7/30.
//
/*
 *  同一进程中的多个线程共享该进程中全部的系统资源
 *  多个线程访问同一共享资源的时候会产生冲突
 *  顺序性、可见性、原子性
 *
 *  顺序性
 *  程序按照代码先后的顺序执行
 *  CPU为了提高程序整体的执行效率，可能会对代码进行优化，按更高效的顺序执行
 *  CPU虽然不保证完全按照代码的顺序执行，但它会保证最终的结果核按代码顺序执行时的结果一致
 *
 *  可见性
 *  线程操作共享变量时，会将该变量从内存加载到CPU缓存中，修改该变量后，CPU会立即更新缓存，但不一定会立即将其写回内存
 *  这时候，如果其他线程访问该变量吗，从内存中读取到的是旧数据，而非第一个线程操作后的数据
 *  当多个线程并发访问共享变量时，一个线程对共享变量的修改，其他线程能够立即看到
 *
 *  原子性
 *  CPU执行指令:读取指令、读取内存、执行指令、写回内存
 *  i++   1.从内存中读取i的值      2.把i+1      3.把结果写回内存
 *  一个操作有可能包含多个步骤，要么全部执行(生效)，要么全部都不执行(不生效)
 *
 *  如何保证线程安全
 *
 *  1.volatile关键字(只解决了内存可见性，不够)
 *  保证内存变量的可见性
 *  禁止代码优化（重排序）
 *
 *  2.原子操作（原子类型）
 *
 *  3.线程同步（锁）
 *
 */

#include "thread"
#include "iostream"
#include "windows.h"

using namespace std;

int a = 0;    //定义全局变量

//普通函数
void func() {
    for (int i = 1; i <= 10000000; i++)a++;
}

void test01() {
    thread t1(func);
    thread t2(func);
    t1.join();
    t2.join();
    cout<<"a="<<a<<endl;
}

int main() {
    test01();
}